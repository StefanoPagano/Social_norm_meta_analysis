setwd("../")
# read data
getwd()
master <- read.csv("File_DB/Output/Treatment.csv") %>%
mutate(Macro_game_type = ifelse(Game_type %in% c("DG","Donation Game"), "DG and Donation Game", Game_type), SD_NE=sqrt(Var_NE)) %>%
subset.data.frame(subset = !(Standard_game %in% c("N")))
ggplot(data=master, aes(x=Avg_NE, y=Avg_coop)) +
geom_point(aes(color=Game_type, shape=Method_elicitation), size=3) +
scale_shape_manual(values=c(1,17)) +
scale_color_manual(values = pal_jco()(9)) +
scale_y_continuous(breaks = seq(0,1,0.1))+
geom_smooth(method = "lm") +
ggtitle("Fig. 1: H1 : Correlation Between Average Cooperation and Norm (NE)") +
stat_cor(method = "spearman", cor.coef.name="rho") +
xlab("Cooperation Norm (as % of endowment)") +
ylab("Cooperation (% of endowment)") +
geom_abline(intercept = 0, slope = 1, linetype="dashed", color="#000033", alpha=0.3)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5, linetype = "solid"))
ggplot(data=master, aes(x=Avg_NE, y=Avg_coop)) +
geom_point(aes(shape=Method_elicitation)) +
scale_shape_manual(values=c(1,17)) +
geom_smooth(method = "lm") +
ggtitle("Fig. 2: H1 : Correlation Between Average Cooperation and Norm (NE)") +
facet_wrap(~Game_type, ncol=3) +
stat_cor(method = "spearman", cor.coef.name="rho")
ggplot(data=master, aes(x=Avg_NE, y=Avg_coop)) +
geom_point(aes(color=Game_type, shape=Method_elicitation), size=1.5) +
scale_shape_manual(values=c(1,17)) +
scale_color_manual(values = pal_jco()(9)) +
scale_y_continuous(breaks = seq(0,1,0.1))+
geom_smooth(method = "lm") +
ggtitle("Fig. 1: H1 : Correlation Between Average Cooperation and Norm (NE)") +
stat_cor(method = "spearman", cor.coef.name="rho") +
xlab("Cooperation Norm (as % of endowment)") +
ylab("Cooperation (% of endowment)") +
geom_abline(intercept = 0, slope = 1, linetype="dashed", color="#000033", alpha=0.3)+
theme(panel.background = element_rect(fill = "white", colour = "black", size = 0.5, linetype = "solid"))
ggplot(data=master, aes(x=Avg_NE, y=Avg_coop)) +
geom_point(aes(shape=Method_elicitation)) +
scale_shape_manual(values=c(1,17)) +
geom_smooth(method = "lm") +
ggtitle("Fig. 2: H1 : Correlation Between Average Cooperation and Norm (NE)") +
facet_wrap(~Game_type, ncol=3) +
stat_cor(method = "spearman", cor.coef.name="rho")
rm(list=ls())
library(ggplot2)
library(tidyverse)
library(mlogit)
library(sjmisc)
library(ggrepel)
library(readxl)
library(sjPlot)
library(ggpubr)
library(foreign)
library(survival)
library(gridExtra)
library(kableExtra)
library(car)
library(DT)
library(zoo)
setwd("../")
# read data beliefs and choices with ALL DATA
master <- read.csv("File_DB/Output/Treatment.csv")
beliefs <- read.csv("File_DB/Output/Subjects_beliefs.csv", sep = ",")
choices <- read.csv("File_DB/Output/Subjects_choices.csv", sep = ",")
setwd("Paper_csv/")
df_avg_kw <- read.csv("2016Kim003_avg_kw.csv", sep = ",")
df_avg_kw <- read.csv("2018Her061_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2013Kru001_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2019Cha026_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2012Laz164_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2007Lis165_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020Bas115_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020And089_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# subset of dg data
master_dg <- master %>%
filter(Game_type == "DG") %>%
subset.data.frame(subset = !(Standard_game %in% c("N")) &
Choice_Method != "OnlyNorms" &
StatusTreatment_Roma == "6-Complete" &
Baseline %in% c(NA, 1)) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# list of treatments in target
list_of_paper_in_target <- master_dg %>%
select(PaperID, TreatmentCode, TreatmentName_paper,
Year, Game_type, Standard_game,
Baseline, Group_size, Rounds,
Method_elicitation, Avg_coop, Avg_NE,
Var_coop, Var_NE, Avg_KW_m)
# read file beliefs and choices
beliefs_dg <- beliefs %>%
filter(treatment_id %in% levels(as.factor(paste(master_dg$PaperID,"_",master_dg$TreatmentCode, sep=""))))
choices_dg <- choices  %>%
filter(treatment_id %in% levels(as.factor(paste(master_dg$PaperID,"_",master_dg$TreatmentCode, sep=""))))
DG_avg_kw <- df_avg_kw %>% merge.data.frame(master_dg %>%
subset.data.frame(select = c(PaperID,
TreatmentName_paper,
TreatmentCode,
treatment_id)),
by = c("PaperID","TreatmentCode","treatment_id")) %>%
filter(!(is.na(TreatmentName_paper)))
temp_master <- DG_avg_kw %>%
distinct(treatment_id)
# inizializing variable for loop
n=1
list_plot <- c()
# creation of a plots list
for (i in temp_master$treatment_id) {
# dataset
temp_master_for <- DG_avg_kw %>%
filter(treatment_id == i)
# list
list_plot[[n]] <- ggplot(temp_master_for,
aes(x=donation, y=Kw_m)) +
geom_bar(stat = "identity") +
labs(title = i,
subtitle = temp_master_for$TreatmentName_paper[temp_master_for$treatment_id == i]) +
ylim(-1,1) +
xlab("Scenario") +
ylab("Appropriateness (average)")
n=n+1
}
# merge plots in one figure
do.call('grid.arrange',
c(list_plot, ncol = 2))
# dataset
perc_choices <- choices_dg %>%
filter(A==1) %>%
group_by(treatment_id, choice) %>%
summarise(n_of_sub = n(),
endowment = mean(endowment)) %>%
merge.data.frame(master_dg %>%
subset.data.frame(select = c(PaperID, TreatmentName_paper,
TreatmentCode, treatment_id)),
by = "treatment_id") %>%
filter(!(is.na(TreatmentName_paper)))
temp_master <- choices_dg %>%
distinct(treatment_id)
# inizializing variables for loop
n=1
list_plot <- c()
# creation of a plots list
for (i in temp_master$treatment_id) {
# dataset
temp_master_for <- perc_choices %>%
filter(treatment_id == i)
temp_master_for <- temp_master_for %>%
mutate(total = sum(n_of_sub),
perc_per_action = round(n_of_sub/total*100, digits=2))
print(temp_master_for$endowment)
# list
list_plot[[n]] <- ggplot(temp_master_for,
aes(x=choice,
y=perc_per_action)) +
geom_bar(stat = "identity") +
labs(title = i,
subtitle = temp_master_for$TreatmentName_paper[temp_master_for$treatment_id == i]) +
xlim(min(choices_dg %>% filter(treatment_id==i) %>% select(scenarios))-1,
max(choices_dg %>% filter(treatment_id==i) %>% select(scenarios))+1) +
ylim(0,100) +
xlab("Choice") +
ylab("Subjects (%)")
n=n+1
}
# merge plots in one figure
do.call('grid.arrange',c(list_plot, ncol = 2))
# interpolation of appropriateness with scenarios out of game
beliefs_only_kim <- beliefs_dg %>%
filter(paper_id == "2016Kim003" & treatment_id == "2016Kim003_7") %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
mutate(KW_Normative_temp = KW_Normative)
n_subj = length(levels(as.factor(beliefs_only_kim$subject_id)))
kim003_interpolation <- data.frame(paper_id=NA,
treatment_id=NA,
subject_id = NA,
scenarios=NA,
KW_Normative=NA,
KW_Normative_temp=NA)
for (subj in levels(as.factor(beliefs_only_kim$subject_id))) {
subj_df <- data.frame(paper_id="2016Kim003",
treatment_id="2016Kim003_7",
subject_id = subj,
scenarios=seq(1,15,2),
KW_Normative = NA,
KW_Normative_temp=NA)
subj_beliefs <- beliefs_only_kim %>%
filter(subject_id == subj)
#print(subj_beliefs)
subj_beliefs <- subj_beliefs %>%
rbind.data.frame(subj_df) %>%
arrange(paper_id, treatment_id, subject_id, scenarios) %>%
mutate(KW_Normative = na.approx(KW_Normative_temp,
maxgap = 1,
rule = 1))
kim003_interpolation <- subj_beliefs %>%
rbind.data.frame(kim003_interpolation)
#print(kim003_interpolation)
}
# # how many scenarios are there for each subject in kim003_interpolation dataframe?
# kim003_interpolation %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# # how many scenarios are there for each subject in beliefs_dg datafreme?
# beliefs_dg %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# dataset to plot consistency
df_consistency_beliefs <- beliefs_dg %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
filter(treatment_id %in% levels(as.factor(master_dg$treatment_id))) %>%
filter(paper_id != "2016Kim003") %>%
rbind.data.frame(kim003_interpolation %>% select(-KW_Normative_temp)) %>%
merge.data.frame(master_dg %>%
subset.data.frame(select = c(treatment_id,
max_sigma)),
by="treatment_id")
# %>%
#   group_by(treatment_id, scenarios) %>%
#   summarise(sd = sd(KW_Normative),
#             max_sigma = max_sigma,
#             appropriateness = sum(KW_Normative)) %>%
#   mutate(consistency = 1-(sd/max_sigma))
scenarios_w_max_appropriateness <- beliefs_dg %>%
group_by(treatment_id, scenarios) %>%
summarise(KW=mean(KW_Normative)) %>%
summarise(scenarios=scenarios[which(KW==max(KW))])
output <- merge.data.frame(scenarios_w_max_appropriateness,
df_consistency_beliefs,
all.x = T,
by=c("treatment_id", "scenarios"))
# # are there the same subjects between output and beliefs_dg?
# o <- output %>% group_by(treatment_id) %>% summarise(n_o=n())
# beliefs_dg %>% filter(scenarios==0) %>% group_by(treatment_id) %>% summarise(n_b=n()) %>% merge.data.frame(o) %>% mutate(test=ifelse(n_b-n_o==0,"ok","n"))
df_specificity_per_subject <- beliefs_dg %>%
group_by(subject_id) %>%
mutate(n_actions_positive = sum(KW_Normative>0),
n_actions_negative=sum(KW_Normative<=0),
specificity = n_actions_negative/n_actions_positive)
#box plot of specificity
ggplot(df_specificity_per_subject,
aes(x=treatment_id,
y=specificity)) +
geom_boxplot() +
labs(title="Boxplot of specificity per paper") +
xlab("Paper") +
ylab("Specificity")
mean_beliefs <- df_consistency_beliefs %>%
group_by(treatment_id, scenarios) %>%
summarise(mean_app = mean(KW_Normative),
sd_app = sd(KW_Normative))
utility_df_treatment <- choices_dg %>%
merge.data.frame(mean_beliefs) %>%
arrange(paper_id,treatment_id,subject_id,scenarios) %>%
mutate(payoff = endowment - scenarios) %>%
relocate(paper_id,treatment_id,subject_id,scenarios,choice,A,endowment,
payoff,mean_app,sd_app)
utility_df_treatment$id = utility_df_treatment %>% group_indices(subject_id)
# dataset without Her061, missing age and gender
utility_df_treatment_demo <- utility_df_treatment %>%
filter(!(paper_id %in% c("2018Her061", "2007Lis165", "2012Laz164", "2013Kru001")))
betas_se_logit <- data.frame(paper = NA, alpha=NA, beta=NA, SE_alpha=NA, SE_beta=NA, MRS=NA)
# mlogit
model_se_list <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment$treatment_id))) {
model_se=mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
model_se_list[[n_model]] = model_se
n_model = n_model + 1
betas_se_logit <- betas_se_logit %>%
rbind.data.frame(data.frame(paper = i,
alpha = as.numeric(model_se$coefficients[1]),
beta=as.numeric(model_se$coefficients[2]),
SE_alpha=coef(summary(model_se))[1, "Std. Error"],
SE_beta=coef(summary(model_se))[2, "Std. Error"],
MRS = 2*as.numeric(model_se$coefficients[2])/as.numeric(model_se$coefficients[1])))
}
# mlogit gender
model_list_gender <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment_demo$treatment_id))) {
print(i)
model_se_gender=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app + mean_app:female, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_gender[[n_model]] = model_se_gender
n_model = n_model +1
}
# mlogit age
model_list_age <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment_demo$treatment_id))) {
print(i)
model_se_age=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app + mean_app:age, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_age[[n_model]] = model_se_age
n_model = n_model +1
}
prova_model <- tab_model(model_list_sea, dv.labels = levels(as.factor(utility_df_treatment$treatment_id)), show.aic = T, show.loglik = T, show.se = T, show.ci = F, title = "Model Estimates")
betas_sea_logit <- data.frame(paper = NA, alpha=NA, beta=NA, delta=NA, SE_alpha=NA, SE_beta=NA, SE_delta=NA, MRS=NA)
model_list_sea <- list()
n_model = 1
# mlogit consistency on utility_df_treatment
for (i in levels(as.factor(utility_df_treatment$treatment_id))) {
model_sea=mclogit::mclogit(cbind(A,choice)~ payoff + sd_app, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_sea[[n_model]] = model_sea
n_model = n_model +1
# betas_sea_logit <- betas_sea_logit %>%
#   rbind.data.frame(data.frame(paper = i,
#                               alpha = as.numeric(model_sea$coefficients[1]),
#                               beta=as.numeric(model_sea$coefficients[2]),
#                               delta=as.numeric(model_sea$coefficients[3]),
#                               SE_alpha=coef(summary(model_sea))[1, "Std. Error"],
#                               SE_beta=coef(summary(model_sea))[2, "Std. Error"],
#                               SE_delta=coef(summary(model_sea))[3, "Std. Error"],
#                               MRS = 2*as.numeric(model_sea$coefficients[2])/as.numeric(model_sea$coefficients[1])))
}
model_list_sea1 <- list()
n_model = 1
# mlogit consistency on utility_df_treatment
for (i in levels(as.factor(utility_df_treatment$treatment_id))) {
model_sea1=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app + mean_app:sd_app, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_sea1[[n_model]] = model_sea1
n_model = n_model +1
}
model_list_sea2 <- list()
n_model = 1
# mlogit consistency on utility_df_treatment
for (i in levels(as.factor(utility_df_treatment$treatment_id))) {
model_sea2=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app + mean_app*sd_app, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_sea2[[n_model]] = model_sea2
n_model = n_model +1
}
prova_model <- tab_model(model_list_sea, dv.labels = levels(as.factor(utility_df_treatment$treatment_id)), show.aic = T, show.loglik = T, show.se = T, show.ci = F, title = "Model Estimates")
prova_model
prova_model$page.content
#Creating data frames
df1 <- data.frame("V1"=rnorm(10,1,10),"V2"=rnorm(10,1,10),"V3"=rnorm(10,1,10))
df2 <- data.frame("V1"=rnorm(10,1,10),"V2"=rnorm(10,1,10),"V3"=rnorm(10,1,10))
df3 <- data.frame("V1"=rnorm(10,1,10),"V2"=rnorm(10,1,10),"V3"=rnorm(10,1,10))
df4 <- data.frame("V1"=rnorm(10,1,10),"V2"=rnorm(10,1,10),"V3"=rnorm(10,1,10))
df5 <- data.frame("V1"=rnorm(10,1,10),"V2"=rnorm(10,1,10),"V3"=rnorm(10,1,10))
# Creating a list of data frames
df_list <- ls(pattern="df")
# Renaming the variables in the data frame
for(i in df_list){
aux <- get(i)
names(aux)[2:3] <- c("Vari2","Vari3")
assign(i,aux)
}
View(aux)
View(aux)
install.packages("AICcmodavg")
library(AICcmodavg)
View(utility_df_treatment)
rm(list=ls())
library(ggplot2)
library(tidyverse)
library(mlogit)
library(sjmisc)
library(ggrepel)
library(readxl)
library(sjPlot)
library(ggpubr)
library(foreign)
library(survival)
library(gridExtra)
library(kableExtra)
library(car)
library(DT)
library(zoo)
library(AICcmodavg)
setwd("../")
# read data beliefs and choices with ALL DATA
master <- read.csv("File_DB/Output/Treatment.csv")
beliefs <- read.csv("File_DB/Output/Subjects_beliefs.csv", sep = ",")
choices <- read.csv("File_DB/Output/Subjects_choices.csv", sep = ",")
setwd("Paper_csv/")
df_avg_kw <- read.csv("2016Kim003_avg_kw.csv", sep = ",")
df_avg_kw <- read.csv("2018Her061_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2013Kru001_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2019Cha026_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2012Laz164_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2007Lis165_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020Bas115_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020And089_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# subset of dg data
master_dg <- master %>%
filter(Game_type == "DG") %>%
subset.data.frame(subset = !(Standard_game %in% c("N")) &
Choice_Method != "OnlyNorms" &
StatusTreatment_Roma == "6-Complete" &
Baseline %in% c(NA, 1)) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# list of treatments in target
list_of_paper_in_target <- master_dg %>%
select(PaperID, TreatmentCode, TreatmentName_paper,
Year, Game_type, Standard_game,
Baseline, Group_size, Rounds,
Method_elicitation, Avg_coop, Avg_NE,
Var_coop, Var_NE, Avg_KW_m)
# read file beliefs and choices
beliefs_dg <- beliefs %>%
filter(treatment_id %in% levels(as.factor(paste(master_dg$PaperID,"_",master_dg$TreatmentCode, sep=""))))
choices_dg <- choices  %>%
filter(treatment_id %in% levels(as.factor(paste(master_dg$PaperID,"_",master_dg$TreatmentCode, sep=""))))
# interpolation of appropriateness with scenarios out of game
beliefs_only_kim <- beliefs_dg %>%
filter(paper_id == "2016Kim003" & treatment_id == "2016Kim003_7") %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
mutate(KW_Normative_temp = KW_Normative)
n_subj = length(levels(as.factor(beliefs_only_kim$subject_id)))
kim003_interpolation <- data.frame(paper_id=NA,
treatment_id=NA,
subject_id = NA,
scenarios=NA,
KW_Normative=NA,
KW_Normative_temp=NA)
for (subj in levels(as.factor(beliefs_only_kim$subject_id))) {
subj_df <- data.frame(paper_id="2016Kim003",
treatment_id="2016Kim003_7",
subject_id = subj,
scenarios=seq(1,15,2),
KW_Normative = NA,
KW_Normative_temp=NA)
subj_beliefs <- beliefs_only_kim %>%
filter(subject_id == subj)
#print(subj_beliefs)
subj_beliefs <- subj_beliefs %>%
rbind.data.frame(subj_df) %>%
arrange(paper_id, treatment_id, subject_id, scenarios) %>%
mutate(KW_Normative = na.approx(KW_Normative_temp,
maxgap = 1,
rule = 1))
kim003_interpolation <- subj_beliefs %>%
rbind.data.frame(kim003_interpolation)
#print(kim003_interpolation)
}
# # how many scenarios are there for each subject in kim003_interpolation dataframe?
# kim003_interpolation %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# # how many scenarios are there for each subject in beliefs_dg datafreme?
# beliefs_dg %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# dataset to plot consistency
df_consistency_beliefs <- beliefs_dg %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
filter(treatment_id %in% levels(as.factor(master_dg$treatment_id))) %>%
filter(paper_id != "2016Kim003") %>%
rbind.data.frame(kim003_interpolation %>% select(-KW_Normative_temp)) %>%
merge.data.frame(master_dg %>%
subset.data.frame(select = c(treatment_id,
max_sigma)),
by="treatment_id")
# %>%
#   group_by(treatment_id, scenarios) %>%
#   summarise(sd = sd(KW_Normative),
#             max_sigma = max_sigma,
#             appropriateness = sum(KW_Normative)) %>%
#   mutate(consistency = 1-(sd/max_sigma))
scenarios_w_max_appropriateness <- beliefs_dg %>%
group_by(treatment_id, scenarios) %>%
summarise(KW=mean(KW_Normative)) %>%
summarise(scenarios=scenarios[which(KW==max(KW))])
output <- merge.data.frame(scenarios_w_max_appropriateness,
df_consistency_beliefs,
all.x = T,
by=c("treatment_id", "scenarios"))
# # are there the same subjects between output and beliefs_dg?
# o <- output %>% group_by(treatment_id) %>% summarise(n_o=n())
# beliefs_dg %>% filter(scenarios==0) %>% group_by(treatment_id) %>% summarise(n_b=n()) %>% merge.data.frame(o) %>% mutate(test=ifelse(n_b-n_o==0,"ok","n"))
mean_beliefs <- df_consistency_beliefs %>%
group_by(treatment_id, scenarios) %>%
summarise(mean_app = mean(KW_Normative),
sd_app = sd(KW_Normative))
utility_df_treatment <- choices_dg %>%
merge.data.frame(mean_beliefs) %>%
arrange(paper_id,treatment_id,subject_id,scenarios) %>%
mutate(payoff = endowment - scenarios) %>%
relocate(paper_id,treatment_id,subject_id,scenarios,choice,A,endowment,
payoff,mean_app,sd_app)
utility_df_treatment$id = utility_df_treatment %>% group_indices(subject_id)
View(utility_df_treatment)
model_se=mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id=="2020Bas115_2a"))
tab_model(model_se)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2020Bas115_2a"),choice = "A", shape = "long", alt.var = "scenarios")
df <- mlogit.data(utility_df_treatment %>% filter(treatment_id=="2020Bas115_2a"),choice = "A", shape = "long", alt.var = "scenarios")
ml.ml <- mlogit(A~ payoff + mean_app| 0, df)
ml.ml
tab_model(ml.mcl, ml.ml)
ml.mcl <-mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id=="2020Bas115_2a"))
df <- mlogit.data(utility_df_treatment %>% filter(treatment_id=="2020Bas115_2a"),choice = "A", shape = "long", alt.var = "scenarios")
ml.ml <- mlogit(A~ payoff + mean_app| 0, df)
tab_model(ml.mcl, ml.ml)
ml.ml
tab_model(ml.mcl, ml.ml, show.aic = T, show.loglik = T, show.se = T, show.ci = F, transform=NULL)
