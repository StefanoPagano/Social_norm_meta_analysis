setwd("../")
# read data
master <- read.csv("File_DB/Output/Treatment.csv") %>%
filter(Game_type == "DG") %>%
subset.data.frame(subset = !(Standard_game %in% c("N")) &
Choice_Method != "OnlyNorms" &
StatusTreatment_Roma == "6-Complete" &
Baseline %in% c(NA, 1)) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# list of treatments in target
list_of_paper_in_target <- read.csv("File_DB/Output/Treatment.csv") %>%
filter(Game_type == "DG") %>%
subset.data.frame(subset = !(Standard_game %in% c("N")) &
Choice_Method != "OnlyNorms" &
StatusTreatment_Roma == "6-Complete" &
Baseline %in% c(NA, 1),
select = c(PaperID, TreatmentCode, TreatmentName_paper,
Year, Game_type, Standard_game,
Baseline, Group_size, Rounds,
Method_elicitation, Avg_coop, Avg_NE,
Var_coop, Var_NE, Avg_KW_m))
# read file beliefs and choices
beliefs <- read.csv("File_DB/Output/Subjects_beliefs.csv", sep = ",") %>%
filter(treatment_id %in% levels(as.factor(paste(master$PaperID,"_",master$TreatmentCode, sep=""))))
choices <- read.csv("File_DB/Output/Subjects_choices.csv", sep = ",") %>%
filter(treatment_id %in% levels(as.factor(paste(master$PaperID,"_",master$TreatmentCode, sep=""))))
# print table of "list_of_paper_in_target"
opts <- options(knitr.kable.NA = "")
kbl(list_of_paper_in_target,
digits = 4,
booktabs = T,
align = "llllllllllrrrrrr",
centering = F,
caption="List of paper after selection criteria applied") %>%
kable_styling(position = "left",
full_width = F) %>%
column_spec(1, bold = T)
setwd("../")
setwd("Paper_csv/")
df_avg_kw <- read.csv("2016Kim003_avg_kw.csv", sep = ",")
df_avg_kw <- read.csv("2018Her061_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2019Cha026_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020Bas115_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
df_avg_kw <-  df_avg_kw %>% merge.data.frame(master %>%
subset.data.frame(select = c(PaperID,
TreatmentName_paper,
TreatmentCode,
treatment_id)),
by = c("PaperID","TreatmentCode","treatment_id")) %>%
filter(!(is.na(TreatmentName_paper)))
temp_master <- df_avg_kw %>%
distinct(treatment_id)
# inizializing variable for loop
n=1
list_plot <- c()
# creation of a plots list
for (i in temp_master$treatment_id) {
# dataset
temp_master_for <- df_avg_kw %>%
filter(treatment_id == i)
# list
list_plot[[n]] <- ggplot(temp_master_for,
aes(x=donation, y=Kw_m)) +
geom_bar(stat = "identity") +
labs(title = i,
subtitle = temp_master_for$TreatmentName_paper[temp_master_for$treatment_id == i]) +
ylim(-1,1) +
xlab("Scenario") +
ylab("Appropriateness (average)")
n=n+1
}
# merge plots in one figure
do.call('grid.arrange',
c(list_plot, ncol = 2))
# dataset
perc_choices <- choices %>%
filter(A==1) %>%
group_by(treatment_id, choice) %>%
summarise(n_of_sub = n(),
endowment = mean(endowment)) %>%
merge.data.frame(master %>%
subset.data.frame(select = c(PaperID, TreatmentName_paper,
TreatmentCode, treatment_id)),
by = "treatment_id") %>%
filter(!(is.na(TreatmentName_paper)))
temp_master <- choices %>%
distinct(treatment_id)
# inizializing variables for loop
n=1
list_plot <- c()
# creation of a plots list
for (i in temp_master$treatment_id) {
# dataset
temp_master_for <- perc_choices %>%
filter(treatment_id == i)
temp_master_for <- temp_master_for %>%
mutate(total = sum(n_of_sub),
perc_per_action = round(n_of_sub/total*100, digits=2))
print(temp_master_for$endowment)
# list
list_plot[[n]] <- ggplot(temp_master_for,
aes(x=choice,
y=perc_per_action)) +
geom_bar(stat = "identity") +
labs(title = i,
subtitle = temp_master_for$TreatmentName_paper[temp_master_for$treatment_id == i]) +
xlim(-1,temp_master_for$endowment[1]) +
ylim(0,100) +
xlab("Choice") +
ylab("Subjects (%)")
n=n+1
}
# merge plots in one figure
do.call('grid.arrange',c(list_plot, ncol = 2))
# interpolation of appropriateness with scenarios out of game
beliefs_only_kim <- beliefs %>%
filter(paper_id == "2016Kim003" & treatment_id == "2016Kim003_7") %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
mutate(KW_Normative_temp = KW_Normative)
n_subj = length(levels(as.factor(beliefs_only_kim$subject_id)))
kim003_interpolation <- data.frame(paper_id=NA,
treatment_id=NA,
subject_id = NA,
scenarios=NA,
KW_Normative=NA,
KW_Normative_temp=NA)
for (subj in levels(as.factor(beliefs_only_kim$subject_id))) {
subj_df <- data.frame(paper_id="2016Kim003",
treatment_id="2016Kim003_7",
subject_id = subj,
scenarios=seq(1,15,2),
KW_Normative = NA,
KW_Normative_temp=NA)
subj_beliefs <- beliefs_only_kim %>%
filter(subject_id == subj)
#print(subj_beliefs)
subj_beliefs <- subj_beliefs %>%
rbind.data.frame(subj_df) %>%
arrange(paper_id, treatment_id, subject_id, scenarios) %>%
mutate(KW_Normative = na.approx(KW_Normative_temp,
maxgap = 1,
rule = 1))
kim003_interpolation <- subj_beliefs %>%
rbind.data.frame(kim003_interpolation)
#print(kim003_interpolation)
}
# # how many scenarios are there for each subject in kim003_interpolation dataframe?
# kim003_interpolation %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# # how many scenarios are there for each subject in beliefs datafreme?
# beliefs %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# dataset to plot consistency
df_consistency_beliefs <- beliefs %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
filter(treatment_id %in% levels(as.factor(master$treatment_id))) %>%
filter(paper_id != "2016Kim003") %>%
rbind.data.frame(kim003_interpolation %>% select(-KW_Normative_temp)) %>%
merge.data.frame(master %>%
subset.data.frame(select = c(treatment_id,
max_sigma)),
by="treatment_id")
# %>%
#   group_by(treatment_id, scenarios) %>%
#   summarise(sd = sd(KW_Normative),
#             max_sigma = max_sigma,
#             appropriateness = sum(KW_Normative)) %>%
#   mutate(consistency = 1-(sd/max_sigma))
scenarios_w_max_appropriateness <- beliefs %>%
group_by(treatment_id, scenarios) %>%
summarise(KW=mean(KW_Normative)) %>%
summarise(scenarios=scenarios[which(KW==max(KW))])
output <- merge.data.frame(scenarios_w_max_appropriateness,
df_consistency_beliefs,
all.x = T,
by=c("treatment_id", "scenarios"))
# # are there the same subjects between output and beliefs?
# o <- output %>% group_by(treatment_id) %>% summarise(n_o=n())
# beliefs %>% filter(scenarios==0) %>% group_by(treatment_id) %>% summarise(n_b=n()) %>% merge.data.frame(o) %>% mutate(test=ifelse(n_b-n_o==0,"ok","n"))
ggplot(output,
aes(x=treatment_id,
y=KW_Normative)) +
geom_boxplot() +
labs(title="Distribution of appropriateness of most appropriate action (norm)") +
xlab("Paper") +
ylab("Appropriateness")
ggplot(output,
aes(x=KW_Normative)) +
geom_density() +
facet_wrap(~treatment_id, ncol=2)
df_specificity_per_subject <- beliefs %>%
group_by(subject_id) %>%
mutate(n_actions_positive = sum(KW_Normative>0),
n_actions_negative=sum(KW_Normative<=0),
specificity = n_actions_negative/n_actions_positive)
#box plot of specificity
ggplot(df_specificity_per_subject,
aes(x=treatment_id,
y=specificity)) +
geom_boxplot() +
labs(title="Boxplot of specificity per paper") +
xlab("Paper") +
ylab("Specificity")
mean_beliefs <- df_consistency_beliefs %>%
group_by(treatment_id, scenarios) %>%
summarise(mean_app = mean(KW_Normative),
sd_app = sd(KW_Normative))
utility_df_treatment <- choices %>%
merge.data.frame(mean_beliefs) %>%
arrange(paper_id,treatment_id,subject_id,scenarios) %>%
mutate(payoff = endowment - scenarios) %>%
relocate(paper_id,treatment_id,subject_id,scenarios,choice,A,endowment,
payoff,mean_app,sd_app)
utility_df_treatment$id = utility_df_treatment %>% group_indices(subject_id)
# dataset without Her061, missing age and gender
utility_df_treatment_demo <- utility_df_treatment %>%
filter(paper_id != "2018Her061")
betas_se_logit <- data.frame(paper = NA, alpha=NA, beta=NA, SE_alpha=NA, SE_beta=NA, MRS=NA)
# mlogit
model_se_list <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment$treatment_id))) {
model_se=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
model_se_list[[n_model]] = model_se
n_model = n_model + 1
betas_se_logit <- betas_se_logit %>%
rbind.data.frame(data.frame(paper = i,
alpha = as.numeric(model_se$coefficients[1]),
beta=as.numeric(model_se$coefficients[2]),
SE_alpha=coef(summary(model_se))[1, "Std. Error"],
SE_beta=coef(summary(model_se))[2, "Std. Error"],
MRS = 2*as.numeric(model_se$coefficients[2])/as.numeric(model_se$coefficients[1])))
}
# mlogit gender
model_list_gender <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment_demo$treatment_id))) {
print(i)
model_se_gender=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app*female, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_gender[[n_model]] = model_se_gender
n_model = n_model +1
}
# mlogit age
model_list_age <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment_demo$treatment_id))) {
print(i)
model_se_age=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app*age, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_age[[n_model]] = model_se_age
n_model = n_model +1
}
opts <- options(knitr.kable.NA = "")
kbl(betas_se_logit,
digits = 4,
booktabs = T,
align = "lcccc",
centering = F,
caption="Coefficients for Social Expectation model") %>%
kable_styling(position = "left",
full_width = F) %>%
column_spec(1, bold = T)
ggplot(betas_se_logit %>% filter(!(is.na(beta))) %>% arrange(beta), aes(x=beta,y=paper)) +
geom_point() +
geom_errorbar(aes(xmin=beta-2*SE_beta,xmax=beta+2*SE_beta))
#standard
choisen_by_scenarios <- xtabs(A ~ scenarios, data)utility_df_treatment
#standard
choisen_by_scenarios <- xtabs(A ~ scenarios, data=utility_df_treatment)
print(choisen_by_scenarios)
tab_model(model_se_list, dv.labels = levels(as.factor(utility_df_treatment$treatment_id)), show.aic = T, show.loglik = T, show.se = T, show.ci = F, title = "Model estimates for social expectation")
#standard
chosen_by_scenarios <- xtabs(A ~ scenarios, data=utility_df_treatment)
barblot(chosen_by_scenarios)
#standard
chosen_by_scenarios <- xtabs(A ~ scenarios, data=utility_df_treatment)
barplot(chosen_by_scenarios)
print(choisen_by_scenarios)
tab_model(model_se_list, dv.labels = levels(as.factor(utility_df_treatment$treatment_id)), show.aic = T, show.loglik = T, show.se = T, show.ci = F, title = "Model estimates for social expectation")
#standard
chosen_by_scenarios <- xtabs(A ~ scenarios, data=utility_df_treatment)
barplot(chosen_by_scenarios)
print(choisen_by_scenarios)
m1 <- mlogit(A ~ payoff + mean_app, data=utility_df_treatment)
#standard
chosen_by_scenarios <- xtabs(A ~ scenarios, data=utility_df_treatment)
barplot(chosen_by_scenarios)
print(choisen_by_scenarios)
m1 <- mlogit(A ~ payoff + mean_app, data=utility_df_treatment %>% filter(paper_id=="2019Cha026"))
View(utility_df_treatment)
Basic_Verrina_2021 <- read.csv("G:/.shortcut-targets-by-id/1IoJDOQWCFiL1qTzSja6byrAlCelNSTsT/Meta-analysis beliefs/Dati paper/2020Bas115/Basic_Verrina_2021.csv")
View(Basic_Verrina_2021)
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, receive, role_DG, social, dg_sn_1:dg_sn_11)
View(dataset_bas)
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, role_DG, social, dg_sn_1:dg_sn_11) %>%
filter(role_DG==1 & social==0)
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, role_DG, social, dg_sn_1:dg_sn_11) %>%
filter(role_DG==1 & social==0) %>%
mutate(payoff_0 = 10,
payoff_0 = 10,
payoff_0 = 10,
payoff_0 = 10,)
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, role_DG, social, dg_sn_1:dg_sn_11) %>%
filter(role_DG==1 & social==0) %>%
mutate(payoff_0 = 10,
payoff_0 = 10,
payoff_0 = 10,
payoff_0 = 10,
payoff_0 = 10,)
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, role_DG, social, dg_sn_1:dg_sn_11) %>%
filter(role_DG==1 & social==0) %>%
mutate(payoff_0 = 10,
payoff_1 = 9,
payoff_2 = 8,
payoff_3 = 7,
payoff_4 = 6,
payoff_5 = 5,
payoff_6 = 4,
payoff_7 = 3,
payoff_8 = 2,
payoff_9 = 1,
payoff_10 = 0)
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
)
View(df_long)
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, role_DG, social, dg_sn_1:dg_sn_11) %>%
filter(role_DG==1 & social==0) %>%
mutate(payoff_0 = 10,
payoff_1 = 9,
payoff_2 = 8,
payoff_3 = 7,
payoff_4 = 6,
payoff_5 = 5,
payoff_6 = 4,
payoff_7 = 3,
payoff_8 = 2,
payoff_9 = 1,
payoff_10 = 0)  %>%
mutate(dg_sn_1 = dplyr::recode(dg_sn_1, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_2 = dplyr::recode(dg_sn_2, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_3 = dplyr::recode(dg_sn_3, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_4 = dplyr::recode(dg_sn_4, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_5 = dplyr::recode(dg_sn_5, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_6 = dplyr::recode(dg_sn_6, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_7 = dplyr::recode(dg_sn_7, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_8 = dplyr::recode(dg_sn_8, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_9 = dplyr::recode(dg_sn_9, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_10 = dplyr::recode(dg_sn_10, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_11 = dplyr::recode(dg_sn_11, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1))
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
)
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
) %>%
arrange(id, scenarios)
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
) %>%
arrange(id, scenarios) %>%
mutate(A = give == (scenaios-1))
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
) %>%
arrange(id, scenarios) %>%
mutate(A = give == (scenarios-1))
dataset_bas <- Basic_Verrina_2021 %>%
select(code, give, role_DG, social, dg_sn_1:dg_sn_11) %>%
filter(role_DG==1 & social==0) %>%
mutate(payoff_0 = 10,
payoff_1 = 9,
payoff_2 = 8,
payoff_3 = 7,
payoff_4 = 6,
payoff_5 = 5,
payoff_6 = 4,
payoff_7 = 3,
payoff_8 = 2,
payoff_9 = 1,
payoff_10 = 0)  %>%
mutate(dg_sn_1 = dplyr::recode(dg_sn_1, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_2 = dplyr::recode(dg_sn_2, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_3 = dplyr::recode(dg_sn_3, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_4 = dplyr::recode(dg_sn_4, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_5 = dplyr::recode(dg_sn_5, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_6 = dplyr::recode(dg_sn_6, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_7 = dplyr::recode(dg_sn_7, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_8 = dplyr::recode(dg_sn_8, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_9 = dplyr::recode(dg_sn_9, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_10 = dplyr::recode(dg_sn_10, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1),
dg_sn_11 = dplyr::recode(dg_sn_11, `1` = -1, `2` = -0.6, `3` = -0.3, `4` = 0.3, `5` = 0.6, `6` = 1))
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
) %>%
arrange(id, scenarios) %>%
mutate(A = give == (scenarios-1))
xtabs(~norms, data=df_long)
xtabs(~norms + A, data=df_long)
xtabs(A ~ norms, data = df_long)
sum(xtabs(A ~ norms, data = df_long))
sum(xtabs(~norms + A, data=df_long))
xxx <- xtabs(A ~ norms, data = df_long) #count for each appropriateness level how much subject choice the scenarios
plot(xxx)
yyy <- xtabs(~norms + A, data=df_long)
xxx <- xtabs(A ~ norms, data = df_long) #count for each appropriateness level how much subject choice the scenarios
plot(yyy)
plot(xxx)
zzz <- xtabs(A ~ norms + payoff, data = df_long)
plot(zzz)
zzz <- xtabs(~ norms + payoff, data = df_long)
plot(zzz)
varying = list(norm_app = 5:15, payoff = 16:26),v.names = c("norms", "payoff"),
#model
df_long_model <- mlogit.data(dataset_bas,
shape = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
alt.var = "scenarios")
#model
df_long_model <- mlogit.data(dataset_bas,
shape = "long",
choice = "A",
varying = list(norm_app = 5:15, payoff = 16:26),
alt.var = "scenarios")
#model
df_long_model <- mlogit.data(dataset_bas,
shape = "long",
choice = "A",
varying = c("norms","payoff")),
alt.var = "scenarios")
#model
df_long_model <- mlogit.data(dataset_bas,
shape = "long",
choice = "A",
varying = c("norms","payoff"),
alt.var = "scenarios")
#model
df_long_model <- mlogit.data(df_long,
shape = "long",
choice = "A",
varying = c("norms","payoff"),
alt.var = "scenarios")
df_long <- reshape(
dataset_bas,
direction = "long",
varying = list(norm_app = 5:15, payoff = 16:26),
v.names = c("norms", "payoff"),
timevar = "scenarios"
) %>%
arrange(id, scenarios) %>%
mutate(scenarios = scenarios - 1) %>%
mutate(A = give == scenarios)
yyy <- xtabs(~norms + A, data=df_long)
xxx <- xtabs(A ~ norms, data = df_long) #count for each appropriateness level how much subject choice the scenarios
zzz <- xtabs(~ norms + payoff, data = df_long)
plot(yyy)
plot(xxx)
plot(zzz)
#model
df_long_model <- mlogit.data(df_long,
shape = "long",
choice = "A",
varying = c("norms","payoff"),
alt.var = "scenarios")
table(df_long$scenarios, df_long$A)
table(df_long$id, df_long$A)
View(master)
treatment  <- read.csv("CNR/GitHub/Social_norm_meta_analysis/File_DB/Output/Treatment.csv")
View(treatment)
source("~/CNR/GitHub/Social_norm_meta_analysis/File_DB/DataBase_Creator.R", echo=TRUE)
treatment  <- read.csv("CNR/GitHub/Social_norm_meta_analysis/File_DB/Output/Treatment.csv")
setwd("~/CNR/GitHub/Social_norm_meta_analysis/File_DB")
treatment  <- read.csv("Output/Treatment.csv")
