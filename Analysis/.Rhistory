result <- if (Social_Norms_meta$Game_type.value %not_in% GameTypeList){return("Game Type")}else{return(NULL)}
return(result)
}
Social_Norms_meta$Game_type_EXP <- GameType_F()
Social_Norms_meta$Game_type_EXP <- if (Social_Norms_meta$Game_type.value %not_in% GameTypeList){return("Game Type")}else{return(NULL)}
Social_Norms_meta$Game_type_EXP <- if (Social_Norms_meta$Game_type %not_in% GameTypeList){return("Game Type")}else{return(NULL)}
Social_Norms_meta$Game_type_EXP <- if (Social_Norms_meta$Game_type !="DG"){return("Game Type")}else{return(NULL)}
GameType_F <- function()
{
result <- if (Social_Norms_meta$Game_type == "DG"){return("Game Type")}else{return(NULL)}
return(result)
}
Social_Norms_meta$Game_type_EXP <- GameType_F()
View(Social_Norms_meta)
GameTypeResult <- GameType_F()
GameType_F <- function()
{
result <- for (i in Social_Norms_meta$Game_type){if (i == "DG"){return("Game Type")}else{return(NULL)}}
return(result)
}
GameTypeResult <- GameType_F()
GameType_F <- function()
{
result <- for (i in Social_Norms_meta$Game_type){if (i %not_in% GameTypeList){return("Game Type")}else{return(NULL)}}
return(result)
}
GameTypeResult <- GameType_F()
Social
Social_Norms_meta$Game_type
for (i in Social_Norms_meta$Game_type){if (i != "DG"){print("Non è uguale a DG")}else{print("E' uguale a DG")}}
library(tidyverse)
library(readxl)
library(writexl)
rm(list = ls())
Social_Norms_meta <- read_excel("Google Drive/Il mio Drive/Meta-analysis beliefs/Social Norms meta.xlsx",
sheet = "ALL")
WP_Filter_F <- function()
{
X <- readline(prompt = "Would you like to analyze Working paper? TRUE/FALSE ->")
WP_State <- as.logical(X)
return(WP_State)
}
if (WP_Filter_F()==TRUE) {
WP_Filter <- "Working Paper"
} else {
WP_Filter <- NULL
}
#---------------------------------------------------------------------------------------
#Report creation: we have the game type for each rows and the counters for each column
#---------------------------------------------------------------------------------------
GameTypeList <- c("DG","UG", "PGG", "TG", "BG", "GEG", "PDG", "Donation Game")
df <- Social_Norms_meta %>%
group_by(Game_type) %>%
subset.data.frame(subset = Game_type %in% GameTypeList &
Environment %in% c("Classroom", "Lab", "Online") &
Method_elicitation=="KW" &
Published %in% c("Published", WP_Filter)
) %>%
summarise(
N_Treatments = n(),
N_Separate_beliefs = sum(Separate_sample_beliefs=="Y"),
N_OneShot_Treatments = sum(One_Shot_Repeated=="OneShot"),
N_Monetary_Incentivized_experiment = sum(Monetary_Incentivized_experiment=="Y"),
N_Available_Data = sum(Available_Dataset=="Y")
) %>%
arrange(-N_Treatments)
View(df)
rm(list = ls())
'%not_in%' <- Negate('%in%')
#---------------------------------------------------------------------------------------
#Report creation
#---------------------------------------------------------------------------------------
GameTypeList <- c("DG", "PDG", "PGG", "TG", "UG", "GEG")
GameType_F <- function()
{
result <- for (i in Social_Norms_meta$Game_type){if (i %not_in% GameTypeList){return("Game Type")}else{return(NULL)}}
return(result)
}
Social_Norms_meta <- read_excel("Google Drive/Il mio Drive/Meta-analysis beliefs/Social Norms meta.xlsx",
sheet = "ALL")
GameType_F()
GameType_F <- function()
{
result <- for (i in Social_Norms_meta$Game_type){if (i %in% GameTypeList){return("Game Type")}else{return(NULL)}}
return(result)
}
GameType_F()
Social_Norms_meta$Game_type
GameType_F <- function()
{
result <- for (i in c(Social_Norms_meta$Game_type)){if (i %in% GameTypeList){return("Game Type")}else{return(NULL)}}
return(result)
}
GameTypeResult <- GameType_F()
GameTypeResult
typeof(result)
Elicitation_F <- function()
{
result <- if (Social_Norms_meta$Method_elicitation !="KW"){return("Elicitation")}else{return(NULL)}
return(result)
}
Elicitation_F()
GameType_F <- function()
{
for (i in Social_Norms_meta$Game_type){
if (i %in% GameTypeList){
return("Game Type")
}else{
return(NULL)}
}
}
GameType_F()
GameType_F <- function()
{
for (i in Social_Norms_meta$Game_type){
print(i)
if (i %in% GameTypeList){
return("Game Type")
}else{
return(NULL)}
}
}
GameType_F(ù)
GameType_F()
Social_Norms_meta$Game_type
GameType_F <- function()
{
for (i in Social_Norms_meta$Game_type){
print(i)
if (i %in% GameTypeList){
print("Game Type")
}else{
print(NULL)}
}
}
GameType_F()
GameType_F <- function()
{
for (i in Social_Norms_meta$Game_type){
print(i)
if (i %not_in% GameTypeList){
print("Game Type")
}else{
print(NULL)}
}
}
GameType_F()
GameType_F <- function()
{
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
print("Game Type")
}else{
print(NULL)}
}
}
GameType_F()
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
append(x, "Game Type")
}else{
append(x, NULL)}
}
}
GameType_F()
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
append(x, "Game Type")
}else{
append(x, NULL)}
}
return(x)
}
GameType_F()
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
append(x, "Game Type")
}else{
append(x, NULL)}
}
print(x)
}
GameType_F()
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NULL)}
}
print(x)
}
GameType_F()
x <- append(x, NA)}
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
print(x)
}
GameType_F()
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
GameType_F()
Social_Norms_meta$Problem <- paste(GameType_F(),GameType_F(),sep = ", ")
View(Social_Norms_meta)
rm(list = ls())
Social_Norms_meta <- read_excel("Google Drive/Il mio Drive/Meta-analysis beliefs/Social Norms meta.xlsx",
sheet = "ALL")
'%not_in%' <- Negate('%in%')
#---------------------------------------------------------------------------------------
#Report creation
#---------------------------------------------------------------------------------------
GameTypeList <- c("DG", "PDG", "PGG", "TG", "UG", "GEG", "Donation Game")
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Elicitation_F <- function()
{
x <- c()
if (Social_Norms_meta$Method_elicitation !="KW"){
x <- append(x, "Elicitation")
}else{
x <- append(x,NA)}
return(x)
}
x <- c()
Field_F <- function()
{
x <- c()
if (Social_Norms_meta$Environment=="Field"){
x <- append(x, "Environment")
}else{
x <- append(x,NA)}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
Elicitation_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Method_elicitation){
if (Social_Norms_meta$Method_elicitation !="KW"){
x <- append(x, "Elicitation")
}else{
x <- append(x,NA)}
}
return(x)
}
Field_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Environment){
if (Social_Norms_meta$Environment=="Field"){
x <- append(x, "Environment")
}else{
x <- append(x,NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList & i != NA){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList & is.na(i)){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList & -is.na(i)){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList & negate(is.na(i))){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
Report <- subset(Social_Norms_meta$TreatmentID, result)
Social_Norms_meta$TreatmentID <- paste(Social_Norms_meta$PaperID,Social_Norms_meta$TreatmentCode,sep = "_")
Report <- subset(Social_Norms_meta$TreatmentID, result)
Report <- subset(Social_Norms_meta$TreatmentID, Social_Norms_meta$Problem)
?subset
Report <- subset(Social_Norms_meta, select = c(TreatmentID, Problem))
View(Report)
Elicitation_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Method_elicitation){
if (i !="KW"){
x <- append(x, "Elicitation")
}else{
x <- append(x,NA)}
}
return(x)
}
Field_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Environment){
if (i =="Field"){
x <- append(x, "Environment")
}else{
x <- append(x,NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
Report <- subset(Social_Norms_meta, select = c(TreatmentID, Problem))
View(Report)
for (i in Social_Norms_meta$Environment){
if (i =="Field"){
x <- append(x, "Environment")
}else{
x <- append(x,NA)}
}
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Elicitation_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Method_elicitation){
if (i %not_in% ElicitList){
x <- append(x, "Elicitation")
}else{
x <- append(x, NA)}
}
return(x)
}
Field_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Environment){
if (i %not_in% EnvironmentList){
x <- append(x, "Environment")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
Report <- subset(Social_Norms_meta, select = c(TreatmentID, Problem))
Report <- subset(Social_Norms_meta, select = c(TreatmentID, Problem))
View(Report)
Social_Norms_meta <- read_excel("Google Drive/Il mio Drive/Meta-analysis beliefs/Social Norms meta.xlsx",
sheet = "ALL")
Social_Norms_meta <- read_excel("Google Drive/Il mio Drive/Meta-analysis beliefs/Social Norms meta.xlsx",
sheet = "ALL")
Social_Norms_meta$TreatmentID <- paste(Social_Norms_meta$PaperID,Social_Norms_meta$TreatmentCode,sep = "_")
rm(list = ls())
Social_Norms_meta <- read_excel("Google Drive/Il mio Drive/Meta-analysis beliefs/Social Norms meta.xlsx",
sheet = "ALL")
Social_Norms_meta$TreatmentID <- paste(Social_Norms_meta$PaperID,Social_Norms_meta$TreatmentCode,sep = "_")
'%not_in%' <- Negate('%in%')
#---------------------------------------------------------------------------------------
#Report creation
#---------------------------------------------------------------------------------------
GameTypeList <- c("DG", "PDG", "PGG", "TG", "UG", "GEG", "Donation Game")
EnvironmentList <- c("Lab", "Classroom", "Online")
ElicitList <- c("KW")
GameType_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Game_type){
#print(i)
if (i %not_in% GameTypeList){
x <- append(x, "Game Type")
}else{
x <- append(x, NA)}
}
return(x)
}
Elicitation_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Method_elicitation){
if (i %not_in% ElicitList){
x <- append(x, "Elicitation")
}else{
x <- append(x, NA)}
}
return(x)
}
Field_F <- function()
{
x <- c()
for (i in Social_Norms_meta$Environment){
if (i %not_in% EnvironmentList){
x <- append(x, "Environment")
}else{
x <- append(x, NA)}
}
return(x)
}
Social_Norms_meta$Problem <- paste(GameType_F(),Elicitation_F(), Field_F(), sep = ", ")
result <- Social_Norms_meta$Problem
result
Report <- subset(Social_Norms_meta, select = c(n_Paper, TreatmentID, Problem))
View(Report)
getwd()
setwd("~/Documents/GitHub/Social_norm_meta_analysis/Analysis")
