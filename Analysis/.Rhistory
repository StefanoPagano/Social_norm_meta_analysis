"social_gamma",
"social_delta_se",
"social_gamma_se",
"inequality_alpha",
"inequality_beta",
"inequality_alpha_se",
"inequality_beta_se")
invisible(paper_and_aic_coeff)
}
aic_table <-data.frame()
social_coeff <- data.frame()
for (t in levels(as.factor(utility_df_treatment_aic_analysis$treatment_id))) {
x = comparison_aic(t)
treatment = x[[1]]
delta_aic = x[[2]][["social expectation",3]] - x[[2]][["inequality aversion",3]]
aic_table <- aic_table %>%
rbind.data.frame(data.frame(treatment_id = treatment,
Delta_AIC = delta_aic))
social_coeff <- social_coeff %>%
rbind.data.frame(data.frame(treatment_id = treatment,
i_alpha = x$inequality_alpha,
i_beta= x$inequality_beta,
i_SE_alpha= x$inequality_alpha_se,
i_SE_beta= x$inequality_alpha_se,
s_delta = x$social_delta,
s_gamma= x$social_gamma,
s_SE_delta= x$social_delta_se,
s_SE_gamma= x$social_gamma_se))
}
rm(list=ls())
library(ggplot2)
library(tidyverse)
library(mlogit)
library(sjmisc)
library(ggrepel)
library(readxl)
library(sjPlot)
library(ggpubr)
library(foreign)
library(survival)
library(gridExtra)
library(kableExtra)
library(car)
library(DT)
library(zoo)
library(AICcmodavg)
library(boot)
setwd("../")
# read data beliefs and choices with ALL DATA
master <- read.csv("File_DB/Output/Treatment.csv") %>%
mutate(treatment_id=paste(PaperID,TreatmentCode,sep="_"))
beliefs <- read.csv("File_DB/Output/Subjects_beliefs.csv", sep = ",")
choices <- read.csv("File_DB/Output/Subjects_choices.csv", sep = ",")
setwd("Paper_csv/")
df_avg_kw <- read.csv("2016Kim003_avg_kw.csv", sep = ",")
df_avg_kw <- read.csv("2018Her061_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2013Kru001_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2019Cha026_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2012Laz164_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2007Lis165_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020Bas115_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020And089_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
master_aic_analysis <- master %>%
filter(Game_type %in% c("DG","ToG", "Donation Game")) %>%
subset.data.frame(subset = !(Standard_game %in% c("N")) &
Choice_Method != "OnlyNorms" &
StatusTreatment_Roma == "6-Complete" &
Baseline %in% c(NA, 1)) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# read file beliefs and choices
choices_aic_analysis <- choices  %>%
filter(treatment_id %in% levels(as.factor(paste(master_aic_analysis$PaperID,"_",master_aic_analysis$TreatmentCode, sep=""))))
choices_aic_analysis <- choices_aic_analysis %>% mutate(payoff=endowment-scenarios,
other_payoff_ahead=ifelse(payoff-scenarios>0,payoff-scenarios,0),
other_payoff_behind=ifelse(scenarios-payoff>0,scenarios-payoff,0))
beliefs_aic_analysis <- beliefs %>%
filter(treatment_id %in% levels(as.factor(paste(master_aic_analysis$PaperID,"_",master_aic_analysis$TreatmentCode, sep=""))))
beliefs_only_kim <- beliefs_aic_analysis %>%
filter(paper_id == "2016Kim003" & treatment_id == "2016Kim003_7") %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
mutate(KW_Normative_temp = KW_Normative)
n_subj = length(levels(as.factor(beliefs_only_kim$subject_id)))
kim003_interpolation <- data.frame(paper_id=NA,
treatment_id=NA,
subject_id = NA,
scenarios=NA,
KW_Normative=NA,
KW_Normative_temp=NA)
for (subj in levels(as.factor(beliefs_only_kim$subject_id))) {
subj_df <- data.frame(paper_id="2016Kim003",
treatment_id="2016Kim003_7",
subject_id = subj,
scenarios=seq(1,15,2),
KW_Normative = NA,
KW_Normative_temp=NA)
subj_beliefs <- beliefs_only_kim %>%
filter(subject_id == subj)
#print(subj_beliefs)
subj_beliefs <- subj_beliefs %>%
rbind.data.frame(subj_df) %>%
arrange(paper_id, treatment_id, subject_id, scenarios) %>%
mutate(KW_Normative = na.approx(KW_Normative_temp,
maxgap = 1,
rule = 1))
kim003_interpolation <- subj_beliefs %>%
rbind.data.frame(kim003_interpolation)
}
beliefs_aic_analysis <- beliefs_aic_analysis %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
filter(paper_id != "2016Kim003") %>%
rbind.data.frame(kim003_interpolation %>% select(-KW_Normative_temp))
mean_beliefs_aic_analysis <- beliefs_aic_analysis %>%
group_by(treatment_id, scenarios) %>%
summarise(mean_app = mean(KW_Normative),
sd_app = sd(KW_Normative))
utility_df_treatment_aic_analysis <- choices_aic_analysis %>%
merge.data.frame(mean_beliefs_aic_analysis) %>%
arrange(paper_id,treatment_id,subject_id,scenarios) %>%
relocate(paper_id,treatment_id,subject_id,scenarios,choice,A,endowment,
payoff,mean_app,sd_app)
utility_df_treatment_aic_analysis$id = utility_df_treatment_aic_analysis %>% group_indices(subject_id)
# function
comparison_aic = function(treatment) {
df_master <- utility_df_treatment_aic_analysis %>%
filter(treatment_id==treatment)
social_expectation_model=clogit(A ~ payoff + mean_app + strata(subject_id),
data=df_master)
# boot.clogit <- function(data, indices){
# new_data <- data[indices,]
# mod <- clogit(A ~ payoff + mean_app + strata(subject_id), data = new_data, x=T, y=T)
# coefficients(mod)
# }
#
# boot_data <- boot(data=ciao, statistic=boot.clogit, R=1000)
social_delta = as.numeric(social_expectation_model$coefficients[1])
social_gamma = as.numeric(social_expectation_model$coefficients[2])
social_delta_se = coef(summary(social_expectation_model))[1, "se(coef)"]
social_gamma_se = coef(summary(social_expectation_model))[2, "se(coef)"]
inequality_aversion_model=clogit(A ~ other_payoff_ahead + other_payoff_behind + strata(subject_id),
data=df_master)
inequality_alpha = as.numeric(inequality_aversion_model$coefficients[1])
inequality_beta = as.numeric(inequality_aversion_model$coefficients[2])
inequality_alpha_se = coef(summary(inequality_aversion_model))[1, "se(coef)"]
inequality_beta_se = coef(summary(inequality_aversion_model))[2, "se(coef)"]
models <- list(social_expectation_model,inequality_aversion_model)
model.names <- c('social expectation', 'inequality aversion')
aic_comp_t <- aictab(cand.set = models, modnames = model.names)
row.names(aic_comp_t) <- aic_comp_t[,1]
paper_and_aic_coeff <- list(treatment,
aic_comp_t,
social_delta,
social_gamma,
social_delta_se,
social_gamma_se,
inequality_alpha,
inequality_beta,
inequality_alpha_se,
inequality_beta_se)
names(paper_and_aic_coeff) <- c("treatment",
"aic_comp_t",
"social_delta",
"social_gamma",
"social_delta_se",
"social_gamma_se",
"inequality_alpha",
"inequality_beta",
"inequality_alpha_se",
"inequality_beta_se")
invisible(paper_and_aic_coeff)
}
aic_table <-data.frame()
social_coeff <- data.frame()
for (t in levels(as.factor(utility_df_treatment_aic_analysis$treatment_id))) {
x = comparison_aic(t)
treatment = x[[1]]
delta_aic = x[[2]][["social expectation",3]] - x[[2]][["inequality aversion",3]]
aic_table <- aic_table %>%
rbind.data.frame(data.frame(treatment_id = treatment,
Delta_AIC = delta_aic))
social_coeff <- social_coeff %>%
rbind.data.frame(data.frame(treatment_id = treatment,
i_alpha = x$inequality_alpha,
i_beta= x$inequality_beta,
i_SE_alpha= x$inequality_alpha_se,
i_SE_beta= x$inequality_alpha_se,
s_delta = x$social_delta,
s_gamma= x$social_gamma,
s_SE_delta= x$social_delta_se,
s_SE_gamma= x$social_gamma_se))
}
aic_table <- aic_table %>%
mutate(Best_model=ifelse(Delta_AIC<0,"Social Expectation", "Inequality Aversion")) %>%
left_join(master %>% select(treatment_id, Game_type), by = "treatment_id") %>%
arrange(Game_type, Delta_AIC)
social_coeff <- social_coeff %>%
left_join(master %>% select(treatment_id, Game_type), by = "treatment_id") %>%
add_row(treatment_id="Average", social_coeff%>%summarise_at(.vars = vars(i_alpha:s_SE_gamma), mean), Game_type="Average")
ggplot(data = aic_table, aes(Delta_AIC, fct_rev(fct_reorder(treatment_id, Game_type)))) +
geom_col(aes(fill=Best_model)) +
xlim(-max(abs(aic_table$Delta_AIC))*1.2,max(abs(aic_table$Delta_AIC))*1.2) +
#ggtitle("AIC difference between Social expectation and Inequality aversion models") +
xlab("AIC Delta") +
ylab("Treatment") +
theme_light() +
theme(legend.position="bottom",
#strip.background = element_rect(color="white", fill="#FFFFFF", size=1.5, linetype="solid"),
strip.text.x = element_text(size = 12, color = "black", face = "bold.italic"),
strip.background = element_blank()) +
scale_fill_brewer(palette="Set1") +
facet_wrap(~Game_type) +
geom_point(shape=1) +
geom_vline(xintercept = 0)
# social expectation model
plot_s_delta <- ggplot(social_coeff, aes(x=s_delta,y=fct_rev(fct_reorder(treatment_id, Game_type)))) +
geom_pointrange(aes(xmin=s_delta-2*s_SE_delta,xmax=s_delta+2*s_SE_delta, color=Game_type), shape=20) +
ylab("Treatment ID") +
xlab("Coefficient of payoff (delta)") +
theme_light() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_vline(xintercept = 0)
plot_s_gamma <- ggplot(social_coeff, aes(x=s_gamma,y=fct_rev(fct_reorder(treatment_id, Game_type)))) +
geom_pointrange(aes(xmin=s_gamma-2*s_SE_gamma,xmax=s_gamma+2*s_SE_gamma, color=Game_type), shape=20) +
xlab("Coefficient of norm expectation (gamma)") +
theme_light() +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_vline(xintercept = 0)
ggarrange(plot_s_delta, plot_s_gamma, ncol = 2, common.legend=T, legend="bottom", widths = c(8,6))
# inequality aversion model
plot_i_alpha <- ggplot(social_coeff, aes(x=i_alpha,y=fct_rev(fct_reorder(treatment_id, Game_type)))) +
geom_pointrange(aes(xmin=i_alpha-2*i_SE_alpha,xmax=i_alpha+2*i_SE_alpha, color=Game_type), shape=20) +
ylab("Treatment ID") +
xlab("Coefficient of other payoff ahead (alpha)") +
theme_light() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_vline(xintercept = 0)
plot_i_beta <- ggplot(social_coeff, aes(x=i_beta,y=fct_rev(fct_reorder(treatment_id, Game_type)))) +
geom_pointrange(aes(xmin=i_beta-2*i_SE_beta,xmax=i_beta+2*i_SE_beta, color=Game_type), shape=20) +
xlab("Coefficient of other payoff behind (beta)") +
theme_light() +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_vline(xintercept = 0)
ggarrange(plot_i_alpha, plot_i_beta, ncol = 2, common.legend=T, legend="bottom", widths = c(8,6))
rm(list=ls())
library(ggplot2)
library(tidyverse)
library(mlogit)
library(sjmisc)
library(ggrepel)
library(readxl)
library(sjPlot)
library(ggpubr)
library(foreign)
library(survival)
library(gridExtra)
library(kableExtra)
library(car)
library(DT)
library(zoo)
library(AICcmodavg)
library(boot)
setwd("../")
# read data beliefs and choices with ALL DATA
master <- read.csv("File_DB/Output/Treatment.csv") %>%
mutate(treatment_id=paste(PaperID,TreatmentCode,sep="_"))
beliefs <- read.csv("File_DB/Output/Subjects_beliefs.csv", sep = ",")
choices <- read.csv("File_DB/Output/Subjects_choices.csv", sep = ",")
setwd("Paper_csv/")
df_avg_kw <- read.csv("2016Kim003_avg_kw.csv", sep = ",")
df_avg_kw <- read.csv("2018Her061_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2013Kru001_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2019Cha026_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2012Laz164_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2007Lis165_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020Bas115_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw)
df_avg_kw <- read.csv("2020And089_avg_kw.csv", sep = ",") %>% rbind.data.frame(df_avg_kw) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
mean_beliefs <- df_consistency_beliefs %>%
group_by(treatment_id, scenarios) %>%
summarise(mean_app = mean(KW_Normative),
sd_app = sd(KW_Normative))
# subset of dg data
master_dg <- master %>%
filter(Game_type == "DG") %>%
subset.data.frame(subset = !(Standard_game %in% c("N")) &
Choice_Method != "OnlyNorms" &
StatusTreatment_Roma == "6-Complete" &
Baseline %in% c(NA, 1)) %>%
mutate(treatment_id = paste(PaperID,"_",TreatmentCode,sep=""))
# list of treatments in target
list_of_paper_in_target <- master_dg %>%
select(PaperID, TreatmentCode, TreatmentName_paper,
Year, Game_type, Standard_game,
Baseline, Group_size, Rounds,
Method_elicitation, Avg_coop, Avg_NE,
Var_coop, Var_NE, Avg_KW_m)
# read file beliefs and choices
beliefs_dg <- beliefs %>%
filter(treatment_id %in% levels(as.factor(paste(master_dg$PaperID,"_",master_dg$TreatmentCode, sep=""))))
choices_dg <- choices  %>%
filter(treatment_id %in% levels(as.factor(paste(master_dg$PaperID,"_",master_dg$TreatmentCode, sep=""))))
# interpolation of appropriateness with scenarios out of game
beliefs_only_kim <- beliefs_dg %>%
filter(paper_id == "2016Kim003" & treatment_id == "2016Kim003_7") %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
mutate(KW_Normative_temp = KW_Normative)
n_subj = length(levels(as.factor(beliefs_only_kim$subject_id)))
kim003_interpolation <- data.frame(paper_id=NA,
treatment_id=NA,
subject_id = NA,
scenarios=NA,
KW_Normative=NA,
KW_Normative_temp=NA)
for (subj in levels(as.factor(beliefs_only_kim$subject_id))) {
subj_df <- data.frame(paper_id="2016Kim003",
treatment_id="2016Kim003_7",
subject_id = subj,
scenarios=seq(1,15,2),
KW_Normative = NA,
KW_Normative_temp=NA)
subj_beliefs <- beliefs_only_kim %>%
filter(subject_id == subj)
#print(subj_beliefs)
subj_beliefs <- subj_beliefs %>%
rbind.data.frame(subj_df) %>%
arrange(paper_id, treatment_id, subject_id, scenarios) %>%
mutate(KW_Normative = na.approx(KW_Normative_temp,
maxgap = 1,
rule = 1))
kim003_interpolation <- subj_beliefs %>%
rbind.data.frame(kim003_interpolation)
#print(kim003_interpolation)
}
# # how many scenarios are there for each subject in kim003_interpolation dataframe?
# kim003_interpolation %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# # how many scenarios are there for each subject in beliefs_dg datafreme?
# beliefs_dg %>% filter(paper_id=="2016Kim003" & treatment_id == "2016Kim003_7") %>%
#   group_by(subject_id) %>%
#   summarise(n_scen=length(scenarios)) %>%
#   group_by(n_scen) %>%
#   summarise(n_subjs = length(subject_id))
# dataset to plot consistency
df_consistency_beliefs <- beliefs_dg %>%
select(paper_id, treatment_id, subject_id, scenarios, KW_Normative) %>%
filter(treatment_id %in% levels(as.factor(master_dg$treatment_id))) %>%
filter(paper_id != "2016Kim003") %>%
rbind.data.frame(kim003_interpolation %>% select(-KW_Normative_temp)) %>%
merge.data.frame(master_dg %>%
subset.data.frame(select = c(treatment_id,
max_sigma)),
by="treatment_id")
# %>%
#   group_by(treatment_id, scenarios) %>%
#   summarise(sd = sd(KW_Normative),
#             max_sigma = max_sigma,
#             appropriateness = sum(KW_Normative)) %>%
#   mutate(consistency = 1-(sd/max_sigma))
scenarios_w_max_appropriateness <- beliefs_dg %>%
group_by(treatment_id, scenarios) %>%
summarise(KW=mean(KW_Normative)) %>%
summarise(scenarios=scenarios[which(KW==max(KW))])
output <- merge.data.frame(scenarios_w_max_appropriateness,
df_consistency_beliefs,
all.x = T,
by=c("treatment_id", "scenarios"))
# # are there the same subjects between output and beliefs_dg?
# o <- output %>% group_by(treatment_id) %>% summarise(n_o=n())
# beliefs_dg %>% filter(scenarios==0) %>% group_by(treatment_id) %>% summarise(n_b=n()) %>% merge.data.frame(o) %>% mutate(test=ifelse(n_b-n_o==0,"ok","n"))
mean_beliefs <- df_consistency_beliefs %>%
group_by(treatment_id, scenarios) %>%
summarise(mean_app = mean(KW_Normative),
sd_app = sd(KW_Normative))
utility_df_treatment <- choices_dg %>%
merge.data.frame(mean_beliefs) %>%
arrange(paper_id,treatment_id,subject_id,scenarios) %>%
mutate(payoff = endowment - scenarios) %>%
relocate(paper_id,treatment_id,subject_id,scenarios,choice,A,endowment,
payoff,mean_app,sd_app)
utility_df_treatment$id = utility_df_treatment %>% group_indices(subject_id)
# dataset without Her061, missing age and gender
utility_df_treatment_demo <- utility_df_treatment %>%
filter(!(paper_id %in% c("2018Her061", "2007Lis165", "2012Laz164", "2013Kru001")))
betas_se_logit <- data.frame(paper = NA, delta=NA, gamma=NA, SE_delta=NA, SE_gamma=NA, MRS=NA)
# mlogit
model_se_list <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment$treatment_id))) {
model_se=mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
model_se_list[[n_model]] = model_se
n_model = n_model + 1
betas_se_logit <- betas_se_logit %>%
rbind.data.frame(data.frame(paper = i,
delta = as.numeric(model_se$coefficients[1]),
gamma=as.numeric(model_se$coefficients[2]),
SE_delta=coef(summary(model_se))[1, "Std. Error"],
SE_gamma=coef(summary(model_se))[2, "Std. Error"],
MRS = 2*as.numeric(model_se$coefficients[2])/as.numeric(model_se$coefficients[1])))
}
# mlogit gender
model_list_gender <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment_demo$treatment_id))) {
print(i)
model_se_gender=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app + mean_app:female, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_gender[[n_model]] = model_se_gender
n_model = n_model +1
}
# mlogit age
model_list_age <- list()
n_model = 1
for (i in levels(as.factor(utility_df_treatment_demo$treatment_id))) {
print(i)
model_se_age=mclogit::mclogit(cbind(A,choice)~ payoff + mean_app + mean_app:age, data=utility_df_treatment%>%
filter(treatment_id==i))
model_list_age[[n_model]] = model_se_age
n_model = n_model +1
}
#standard
tab_model(model_se_list, dv.labels = levels(as.factor(utility_df_treatment$treatment_id)), show.aic = T, show.loglik = T, show.se = T, show.ci = F, title = "Model estimates for social expectation")
choices_df_sp <- choices_dg %>% mutate(payoff=endowment-scenarios,
other_payoff_ahead=ifelse(payoff-scenarios>0,payoff-scenarios,0),
other_payoff_behind=ifelse(scenarios-payoff>0,scenarios-payoff,0))
utility_df_treatment_sp <- choices_df_sp %>%
merge.data.frame(mean_beliefs) %>%
arrange(paper_id,treatment_id,subject_id,scenarios) %>%
relocate(paper_id,treatment_id,subject_id,scenarios,choice,A,endowment,
payoff,mean_app,sd_app)
utility_df_treatment_sp$id = utility_df_treatment_sp %>% group_indices(subject_id)
# mlogit
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2016Kim003_7" & subject_id != "2016Kim003_7_2222"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper1 <- mlogit(A~ other_payoff_ahead + other_payoff_behind| 0, df)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2018Her061_9"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper2 <- mlogit(A~other_payoff_ahead + other_payoff_behind | 0, df)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2019Cha026_1"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper3 <- mlogit(A~other_payoff_ahead + other_payoff_behind | 0, df)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2020Bas115_2a"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper4 <- mlogit(A~other_payoff_ahead + other_payoff_behind | 0, df)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2007Lis165_1a"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper5 <- mlogit(A~other_payoff_ahead + other_payoff_behind | 0, df)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2012Laz164_3"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper6 <- mlogit(A~other_payoff_ahead + other_payoff_behind | 0, df)
df <- mlogit.data(utility_df_treatment_sp %>% filter(treatment_id=="2013Kru001_1a"),choice = "A", shape = "long", alt.var = "scenarios")
ml.paper7 <- mlogit(A~other_payoff_ahead + other_payoff_behind | 0, df)
list_model = list(ml.paper1, ml.paper2, ml.paper3, ml.paper4, ml.paper5, ml.paper6, ml.paper7)
View(ml.paper1)
# mlogit
model_se_list <- list()
n_model = 1
levels(as.factor(utility_df_treatment$treatment_id))
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
i
i=levels(as.factor(utility_df_treatment$treatment_id))
i
utility_df_treatment%>%
filter(treatment_id==i)
utility_df_treatment%>%
filter(treatment_id==i)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i))
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~1|paper_id)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~1|treatment_id)
utility_df_treatment%>%filter(treatment_id%in%i
)
View(utility_df_treatment%>%filter(treatment_id%in%i)
)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~1|subject_id)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~1|scenarios)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~1|paper_id)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~1+mean_app|paper_id)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~mean_app|paper_id)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~-1+mean_app|paper_id)
mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~-1+mean_app+payoff|paper_id)
modelsuca=mclogit::mclogit(cbind(A,choice) ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~-1+mean_app+payoff|paper_id)
summary(modelsuca)
plot_model(modelsuca)
coef(modelsuca)
coef(modelsuca,complete = T)
coefficients(modelsuca,complete = T)
plot_model(modelsuca, type = "re")
modelsuca=mlogit::mlogit(choice ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id%in%i), random = ~-1+mean_app+payoff|paper_id)
modelsuca=mlogit::mlogit(choice ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
modelsuca=mlogit::mlogit(A ~ payoff + mean_app, data=utility_df_treatment%>%
filter(treatment_id==i))
